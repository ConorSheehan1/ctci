// sort stack in ascending orderimport java.util.Collections;import java.util.ArrayList;import java.util.Random;class Node{	int value;	Node next;	Node(int value){		this.value = value;	}	// overloaded constructor empty stack	Node(){this.value = -1;}}class Stack{	private Node head;	void push(int value){		Node temp = this.head;		this.head = new Node(value);		this.head.next = temp;	}	Node pop(){		Node temp = this.head;		this.head = this.head.next;		return temp;	}	void peak(){		System.out.println(this.head.value);	}	boolean isEmpty(){		return this.head == null;	}	Stack(int value){		this.head = new Node(value);	}	@Override	public String toString(){		String s = "";		Node current = this.head;		while (current.next != null){			s += current.value + ", ";			current = current.next;		}		s+=current.value;		return s;	}}public class Question3_6{	public static void main(String[] args){		int size = 10;		Random r = new Random();		// stack of size + 1 random numbers (construct stack with single value)		Stack s = new Stack(r.nextInt(10));		for(int i=0; i<size; i++){			s.push(r.nextInt(10));		}		System.out.println(s);		//convert to array list		ArrayList<Integer> l = new ArrayList<>();		while (!s.isEmpty()){			l.add(s.pop().value);		}		//sort		Collections.sort(l);		//change order		Collections.reverse(l);		//add back into stack		for(int val: l){			s.push(val);		}		//check output		System.out.println(s);	}}